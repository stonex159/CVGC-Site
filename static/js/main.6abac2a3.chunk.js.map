{"version":3,"sources":["components/MemberList.tsx","components/Alerts.tsx","components/ControlPanel.tsx","components/EditModal.tsx","assets/CVGC_Logo.png","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MemberList","theClub","Col","Table","className","scope","map","person","index","name","email","status","AlertSelector","Alert","variant","dismissible","Heading","href","ControlPanel","getMember","showEditModal","addMember","useState","setName","setEmail","setStatus","Form","onSubmit","event","preventDefault","Row","Group","controlId","Label","Control","autoFocus","type","autoCapitalize","value","onChange","e","target","Check","inline","id","label","checked","Button","disabled","length","onClick","EditModal","checkMember","changeMember","visible","setVisible","club","setIndex","hide","clearData","Modal","show","onHide","backdrop","keyboard","datatestid","ModalHeader","closeButton","ModalBody","min","max","ev","num","valueAsNumber","as","rows","App","setClub","Container","src","CVGC_Logo","alt","newName","newEmail","newStatus","p","newClub","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6abac2a3.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Col, Table } from 'react-bootstrap';\r\nimport { Person } from '../interfaces/member';\r\n\r\nexport function MemberList({theClub}:{theClub: (Person[])}): JSX.Element {\r\n\r\n    function renderList(person: Person, index: number){ // renders all the data passsed in from club.map as a table\r\n        return (\r\n            <tr key={index}>\r\n                <td>{index+1}</td>\r\n                <td>{person.name}</td>\r\n                <td>{person.email}</td>\r\n                <td>{person.status}</td>\r\n            </tr>\r\n    )}\r\n\r\n    return <Col> \r\n    <Table>\r\n        <thead className=\"thead-dark\">\r\n            <tr>\r\n                <th scope=\"col\">#</th>\r\n                <th scope=\"col\">Name</th>\r\n                <th scope=\"col\">Email</th>\r\n                <th scope=\"col\">Status</th>\r\n                <th scope=\"col\"></th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            {theClub.map(renderList)}\r\n        </tbody>\r\n    </Table>\r\n    </Col>\r\n\r\n}","import { Alert } from \"react-bootstrap\";\r\n\r\nexport function AlertSelector({status}: {status: String}){\r\n    //console.log(\"Alert entered\")\r\n    switch (status) {\r\n        case \"Yellow\":\r\n            //console.log(\"Yellow entered\")\r\n            return yellowAlert();\r\n        case \"Red\":\r\n            //console.log(\"Red entered\")\r\n            return redAlert();\r\n        default:\r\n            return greenAlert();\r\n    }\r\n\r\n    function yellowAlert(): JSX.Element{\r\n        //console.log(\"Yellow executing\")\r\n        return (\r\n        <Alert variant=\"danger\" dismissible>\r\n            <Alert.Heading>Warning: Yellow Mark Detected</Alert.Heading>\r\n            <p>\r\n            To change a yellow mark to a green mark you must have undergone testing for covid, \r\n            including the authorized covid shot(s). Please go to a UD Covid Testing facility to \r\n            be allowed into club and other UD facilities. \r\n\r\n            Please look <a href=\"https://www.udel.edu/home/coronavirus/testing/\">here</a> for more information\r\n\r\n            Notice: If you have had both shots but still have a yellow mark, please wait 2 weeks for the second shot to come into full affect.\r\n            </p>\r\n        </Alert>\r\n        );\r\n    }\r\n    function redAlert(): JSX.Element{\r\n        return (\r\n        <Alert variant=\"danger\" dismissible>\r\n            <Alert.Heading>Warning: Red Mark Detected</Alert.Heading>\r\n            <p>\r\n                You are currently out of compliance with testing or have Covid. \r\n                Please contact Student Health Services ASAP: (302)-831-2226\r\n            </p>\r\n        </Alert>\r\n    );}\r\n\r\n    function greenAlert(): JSX.Element{\r\n        return(\r\n            <span></span>\r\n        );\r\n    }\r\n}\r\n","import { useState } from 'react';\r\nimport {Button, Col, Form, Row } from 'react-bootstrap';\r\nimport { Person } from '../interfaces/member';\r\nimport { AlertSelector } from './Alerts';\r\n\r\nexport function ControlPanel({getMember, showEditModal, addMember}: \r\n  {getMember: (c:number)=>Person, \r\n    showEditModal: (b: boolean)=>void, \r\n    addMember: (p:Person) => void}): JSX.Element {\r\n\r\n    const [name, setName] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [status, setStatus] = useState(\"\");\r\n  \r\n    function validateForm() { // Makes sure that no text field is empty before submit\r\n      return email.length > 0 && name.length > 0 && status !== \"\";\r\n    }\r\n\r\n    function validateTable() { // Makes sure that there is data to edit\r\n      if(getMember(0))\r\n        return getMember(0).name !== \"\" && getMember(0).email !== \"\" && getMember(0).status !== \"\";\r\n      else\r\n        return false;\r\n    }\r\n  \r\n    function handleSubmit(event: { preventDefault: () => void; }) {\r\n      event.preventDefault();\r\n\r\n      addMember({name, email, status}); // creates and saves a member with the data from the control panel into the club array\r\n      clearData();\r\n    }\r\n\r\n    function showModal() { // makes the modal appear\r\n      showEditModal(true);\r\n    }\r\n\r\n    function clearData(){\r\n      setName(\"\"); // clears the name const and text box\r\n      setEmail(\"\"); // clears the email const and text box\r\n      setStatus(\"\"); // unchecks the radio buttons\r\n    }\r\n  \r\n    return (\r\n      <Col className=\"Login\">\r\n        <Form onSubmit={handleSubmit}>\r\n          <Row>\r\n            <Col>\r\n              <Form.Group  controlId=\"name\">\r\n                <Form.Label className=\"label\">Full Name </Form.Label>\r\n                <Form.Control\r\n                  className=\"textBox\"\r\n                  autoFocus\r\n                  type=\"name\"\r\n                  autoCapitalize = \"on\"\r\n                  value={name}\r\n                  onChange={(e) => setName(e.target.value)}\r\n                />\r\n              </Form.Group>\r\n            </Col>\r\n            <Col>\r\n              <Form.Group controlId=\"email\">\r\n                <Form.Label className=\"label\">Email </Form.Label>\r\n                <Form.Control\r\n                  className=\"textBox\"\r\n                  autoFocus\r\n                  type=\"email\"\r\n                  value={email}\r\n                  onChange={(e) => setEmail(e.target.value)}\r\n                />\r\n              </Form.Group>\r\n            </Col>\r\n            <Col>\r\n              <Form.Group controlId=\"healthCheck\">\r\n                <Form.Label className=\"label\">Health Check</Form.Label>\r\n                <Form.Group>\r\n                  <Form.Check\r\n                  inline\r\n                  type=\"radio\"\r\n                  name=\"status\"\r\n                  value=\"Red\"\r\n                  id=\"red-radio\"\r\n                  label=\"Red\"\r\n                  checked={status === \"Red\"}\r\n                  onChange={(e) => setStatus(e.target.value)}\r\n                  />\r\n                  <Form.Check\r\n                  inline\r\n                  type=\"radio\"\r\n                  name=\"status\"\r\n                  value=\"Yellow\"\r\n                  id=\"yellow-radio\"\r\n                  label=\"Yellow\"\r\n                  checked={status === \"Yellow\"}\r\n                  onChange={(e) => setStatus(e.target.value)}\r\n                  />\r\n                  <Form.Check\r\n                  inline\r\n                  type=\"radio\"\r\n                  name=\"status\"\r\n                  value=\"Green\"\r\n                  id=\"green-radio\"\r\n                  label=\"Green\"\r\n                  checked={status === \"Green\"}\r\n                  onChange={(e) => setStatus(e.target.value)}\r\n                  />\r\n                </Form.Group>\r\n              </Form.Group>\r\n            </Col>\r\n          </Row>\r\n            <Button className=\"button\" type=\"submit\" id=\"submit-button\" disabled={!validateForm()}>\r\n              Submit\r\n            </Button>\r\n            <Button className=\"button\" id=\"edit-button\" onClick={()=>showModal()} disabled={!validateTable()}>\r\n              Edit\r\n            </Button>\r\n        </Form>\r\n        <AlertSelector status={status}></AlertSelector>\r\n      </Col>\r\n    );\r\n  }\r\n","import React, { useState } from 'react';\r\nimport {Modal, ModalBody, Form, Button} from 'react-bootstrap'\r\nimport ModalHeader from 'react-bootstrap/esm/ModalHeader';\r\nimport { Person } from '../interfaces/member';\r\nimport { AlertSelector } from './Alerts';\r\n\r\nexport function EditModal({getMember, checkMember, changeMember, visible, setVisible, club}: \r\n    {getMember: (b: number)=>Person, \r\n    checkMember: (d:number)=>boolean, \r\n    changeMember: (e:number, f:string, g:string, h:string)=> void, \r\n    visible: boolean, \r\n    setVisible: (c:boolean)=>void,\r\n    club: Person[]}): JSX.Element {\r\n\r\n    const [index, setIndex] = useState(0);\r\n    const [name, setName] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [status, setStatus] = useState(\"\");\r\n\r\n    const hide = ()=>setVisible(false);\r\n\r\n    function handleIndexSearch(num: number){ \r\n        if(checkMember(num-1)) // makes sure the index is not out-of-bounds of the array\r\n            setIndex(num-1);\r\n    }\r\n\r\n    function handleSearch(event: { preventDefault: () => void; }){\r\n        event.preventDefault();\r\n\r\n        const person = getMember(index);\r\n\r\n        setName(person.name); // sets the name from the person indexed into the name field\r\n        setEmail(person.email); // sets the email from the person indexed into the email field\r\n        setStatus(person.status); // selects the radio button according to the status from the person indexed\r\n    }\r\n\r\n    function validateForm() {\r\n        return name.length > 0 && email.length > 0;\r\n    }\r\n\r\n    function saveChanges(event: { preventDefault: () => void; }){\r\n        event.preventDefault();\r\n\r\n        changeMember(index, name, email, status); // sends the edit data to be put into the array\r\n        clearData();        \r\n    }\r\n\r\n    function clearData() {\r\n        setName(\"\"); // clears the name field upon submission of edit\r\n        setEmail(\"\"); // clears the email field upon submission of edit\r\n        setStatus(\"\"); // deselects the radio buttons\r\n    }\r\n\r\n    return (\r\n    <Modal\r\n        show={visible}\r\n        onHide={hide}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n        datatestid=\"modal\"\r\n    >\r\n        <ModalHeader closeButton onClick={clearData}>\r\n            Edit\r\n        </ModalHeader>\r\n        <AlertSelector status={status}></AlertSelector>\r\n        <ModalBody>\r\n            <Form \r\n            onSubmit={handleSearch}>\r\n                <Form.Group>\r\n                    <Form.Label>\r\n                        Row Number\r\n                    </Form.Label>\r\n                </Form.Group>\r\n                    <input \r\n                    type=\"number\" \r\n                    min=\"1\" \r\n                    max={club.length}\r\n                    onChange={(ev: React.ChangeEvent<HTMLInputElement>) => handleIndexSearch(ev.target.valueAsNumber)}\r\n                    >\r\n                    </input>\r\n                <Button className=\"button\" type=\"submit\" id=\"search-button\">\r\n                    Search\r\n                </Button>\r\n            </Form>\r\n\r\n            <Form\r\n            onSubmit={saveChanges}>\r\n                <Form.Group controlId=\"name\">\r\n                    <Form.Label>Name</Form.Label>\r\n                    <Form.Control as=\"textarea\" rows={1}\r\n                    value={name}\r\n                    autoCapitalize = \"on\"\r\n                    onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setName(ev.target.value)}/>\r\n                </Form.Group>\r\n                <Form.Group controlId=\"email\">\r\n                    <Form.Label>Email</Form.Label>\r\n                    <Form.Control as=\"textarea\" rows={1}\r\n                    value={email}\r\n                    onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setEmail(ev.target.value)}/>\r\n                </Form.Group>\r\n                <Form.Group controlId=\"healthCheck\">\r\n                    <Form.Label className=\"label\">Health Check</Form.Label>\r\n                    <Form.Group>\r\n                        <Form.Check\r\n                        inline\r\n                        type=\"radio\"\r\n                        name=\"status\"\r\n                        value=\"Red\"\r\n                        id=\"red-radio\"\r\n                        label=\"Red\"\r\n                        checked={status === \"Red\"}\r\n                        onChange={(e) => setStatus(e.target.value)}\r\n                        />\r\n                        <Form.Check\r\n                        inline\r\n                        type=\"radio\"\r\n                        name=\"status\"\r\n                        value=\"Yellow\"\r\n                        id=\"yellow-radio\"\r\n                        label=\"Yellow\"\r\n                        checked={status === \"Yellow\"}\r\n                        onChange={(e) => setStatus(e.target.value)}\r\n                        />\r\n                        <Form.Check\r\n                        inline\r\n                        type=\"radio\"\r\n                        name=\"status\"\r\n                        value=\"Green\"\r\n                        id=\"green-radio\"\r\n                        label=\"Green\"\r\n                        checked={status === \"Green\"}\r\n                        onChange={(e) => setStatus(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Group>\r\n                <Button className=\"button\" type=\"submit\" id=\"save-button\" onClick={hide} disabled={!validateForm}>\r\n                Save Changes\r\n                </Button>\r\n            </Form>\r\n        </ModalBody>\r\n    </Modal>\r\n)}","export default __webpack_public_path__ + \"static/media/CVGC_Logo.b6831654.png\";","import React, { useState } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { MemberList } from './components/MemberList';\nimport { ControlPanel } from './components/ControlPanel';\nimport { Container, Row } from 'react-bootstrap'\nimport { Person } from './interfaces/member'\nimport { EditModal } from './components/EditModal';\n//import CVGC_Banner from '../src/assets/CVGC_Wallpaper.png'\nimport CVGC_Logo from '../src/assets/CVGC_Logo.png'\n\nfunction App(): JSX.Element {\n  const [club, setClub] = useState<Person[]>([]);\n  const [visible, setVisible] = useState<boolean>(false);\n  \n  function addMember(person: Person){ // adds a person to the club array\n    setClub([...club, person]);\n  }\n\n  function getMember(index:number){ // returns the member from the array found at the index\n    return club[index];\n  }\n\n  function checkMember(index:number): boolean{ // checks to see if the index is inbound of the array\n    if(club[index])\n      return true;\n    else\n      return false;\n  }\n\n  function changeMember(index:number, newName:string, newEmail:string, newStatus:string){\n    const p: Person = {...club[index], name: newName, email: newEmail, status: newStatus}; // creates a new person with the edit form's properties\n    const newClub = [...club]; // creates a shallow copy of the club array\n\n    newClub[index] = p; // replaces the member at the index of the copy-array\n    setClub(newClub); // sets club to look at the newClub array\n  }\n\n  return (\n    \n    <Container className=\"App\">\n      <img \n        src={CVGC_Logo}\n        alt=\"\"\n        id=\"CVGC-Logo\"\n        />\n      <Row>\n        <ControlPanel getMember={getMember} showEditModal={setVisible}  addMember={addMember}></ControlPanel>\n      </Row>\n      <Row>\n        <EditModal getMember={getMember} checkMember={checkMember} changeMember={changeMember} visible={visible} setVisible={setVisible} club={club}></EditModal>\n        <MemberList theClub={club}></MemberList>\n      </Row>\n      <Row></Row>\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}